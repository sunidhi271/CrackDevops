🐳 Docker – DevOps Interview Prep (Q&A Style)
✅ Basics
Q1: What is Docker and why is it used?
A: Docker is a containerization tool that helps package applications with all dependencies, making them portable, lightweight, and consistent across environments.
---
Q2: What are the benefits of using Docker?
A:
- Lightweight and fast
- Consistent dev-to-prod environment
- Easy to scale microservices
- Faster deployments
- Environment isolation
---
⚙️ Architecture
Q3: What is the architecture of Docker?
A:
- Docker Engine: Core service
- Docker Daemon: Runs in the background, manages containers
- Docker CLI: User interacts via commands
- REST API: Used for programmatic control
---
⚙️ Working
Q4: How does Docker work under the hood?
A:
- Uses Linux namespaces for isolation
- Uses cgroups for resource limits
- Uses layered file systems
- Images are built from Dockerfiles
---
📄 CMD vs ENTRYPOINT
Q5: What is the difference between CMD and ENTRYPOINT in Dockerfile?
- CMD	ENTRYPOINT
- Default command	Main application
- Overridable at runtime	Not easily overridden unless forced
- Replaced if args are passed	Args are appended to ENTRYPOINT
---
🌿 ENV vs ARG
Q6: Difference between ENV and ARG in Dockerfile?
ENV	: Available at runtime	| Can be overridden via run
ARG : Available only at build time | Used with build --build-arg
---
📋 COPY vs ADD
Q7: COPY vs ADD in Dockerfile?
A:
COPY: Basic file/folder copy
ADD: Extra features – extract .tar, download URLs

---
🌐 Docker Networking
Q8: What are the different Docker networking types?
Type	-   Use Case
Bridge  -	Default, good for isolated containers
Host	  -  Shares host’s network
Overlay	- Multi-host communication (Swarm)
None	  - Full network isolation

---
🧱 Multistage Dockerfile
Q9: What is a multistage Docker build? A: Used to separate build and runtime environments, resulting in smaller, cleaner final images.
Example:
```
FROM alpine AS builder
COPY script.sh .
RUN sh script.sh

FROM ubuntu
COPY --from=builder /script.sh .
ENTRYPOINT ["sh", "./script.sh"]

---
🛠 Optimization
Q10: How do you optimize Docker images?
A:
- Use minimal base images like Alpine
- Combine RUN instructions
- Use multistage builds
- Remove unnecessary files

---
🔒 Security
Q11: Docker security best practices?
A:
- Use trusted base images
- Scan images for vulnerabilities
- Drop unnecessary container privileges
- Use COPY over ADD
---
📦 Sample "Hello World"
Q12: How to write a basic Dockerfile to print "Hello World"?
```
FROM alpine
CMD echo "Hello World"
```
docker build -t hello .
docker run hello

---
🔁 Port Forwarding
Q13: How do you expose container ports to host?
A:
docker run -p 8080:80 nginx

---
🧠 Kernel Integration
Q14: How does Docker use the Linux kernel?
A:
- Uses namespaces for isolation (PID, NET, etc.)
- Uses cgroups for limiting resources
- Shares the host kernel, no OS overhead

---
🧍 Container vs VM
Q15: Difference between Docker container and VM?

Docker:	Shares host kernel | Starts in seconds | Lightweight
Virtual Machine: Has its own OS and kernel | Takes minutes| Heavy resource usage

---
🧹 Useful Commands
Q16: How to stop all containers?
A: docker stop $(docker ps -q)

---
Q17: How to prune unused resources?
A: docker system prune --volumes

---
Q18: How to remove all images?
docker rmi $(docker images -aq)

---
Q19: How to copy a file into a container?
A: docker cp file.txt my_container:/app/

---
Q20: How to check Docker service status?
A: systemctl status docker

---
📂 Volume vs Bind Mount
Q21: Difference between Docker volume and bind mount?
A: 
Volume:	Managed by Docker | Portable across environments | -v myvol:/data
Bind Mount: Managed by USer |  Host-dependent | -v /host/path:/container/path

---
🔐 Secrets in Build
Q22: How to use secrets securely during build?
A: 
docker build --secret id=mysecret,src=secret.txt .

Dockerfile:
RUN --mount=type=secret,id=mysecret,target=/etc/secret sh /etc/secret

---
🔄 Testing Network Between Containers
Q23: How to curl Nginx container from another container on same network?
A: 
docker network create test_bridge
docker run -d --name nginx --network test_bridge -p 8080:80 nginx
docker run -it --network test_bridge alpine sh -c "apk add curl && curl http://nginx"
